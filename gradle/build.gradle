ext { 
    // The version number is appended automatically with a build number and revision number when building on the CI server. 
    // When building locally, the version number is appended with '-SNAPSHOT' to indicate a non-approved version.
    major = '0'
    minor = '1'
    bugfix = '0'
    
    // Global project variable -- used by version info.
    set('dateString', new Date().format('yyyyMMdd-HHmmss'))
}

version = '1.0'

// Apply the version number to all projects
// apply from:'kp_version.gradle'

// All our projects have the same group id, this is used when publishing the archives
// NOTE: projects are listed in settings.gradle
allprojects { group = 'fritzy' }

// Define all library dependencies in one file for clarity
apply from:'dependencies.gradle'

// NOTE: the following is only needed for (Technolution) plugins.
buildscript {
    repositories {
        maven { url="http://nexus/nexus/content/groups/public/" }
        maven { url="http://nexus/nexus/content/repositories/tnl_gradle_plugins" }
    }
    dependencies {        
		classpath 'nl.technolution:techno-jax:0.2.618'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
        classpath "gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:2.17.0"
        classpath "io.swagger.core.v3:swagger-gradle-plugin:2.0.8"
    }
}

// Configuration for all subprojects.
subprojects {       
    apply plugin: 'java'
    apply plugin: 'io.swagger.core.v3.swagger-gradle-plugin'
    apply plugin: 'com.github.johnrengelman.shadow'
     
    plugins.withType(JavaPlugin) {
    
		// JDK version
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
		tasks.withType(JavaCompile) {
			// Force UTF-8 as the default character encoding (instead of the platform default, which may be CP1252 in Windows)
			options.encoding = 'UTF-8'
		}
    }
    
    plugins.withType(ApplicationPlugin) {
        resolve {
            outputFileName = project.name
            outputFormat = 'JSONANDYAML'
            prettyPrint = 'true'
            classpath = sourceSets.main.runtimeClasspath
            resourcePackages = ['nl.technolution']
            outputPath = new java.io.File(project.buildDir, "/api")
        }
        
        def jarName = project.name + '-app'
        
        shadowJar {
            baseName = "${jarName}"
            classifier = null
            version = null
            mergeServiceFiles()
        }
        
        task copyArtifactsToDocker(type: Copy) {
            from (new java.io.File(project.buildDir, "/libs")) {
                include "${jarName}.jar"
            }
            from ('src/main/dist/') {
                include '*'
            }
            into new java.io.File(project(":docker").buildDir, "/" + project.name)
        }
        copyArtifactsToDocker.dependsOn shadowJar
    }
    
    // Standard libraries added to all projects
    dependencies {
        testCompile libraries.test_junit
    }
}

