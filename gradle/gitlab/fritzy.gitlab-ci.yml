variables:
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
    VERSION_MAJOR: "0"
    VERSION_MINOR: "1"
    VERSION_BUGFIX: "0"
    BUILD_VERSION: $VERSION_MAJOR.$VERSION_MINOR.$VERSION_BUGFIX
    

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle
  - export ORG_GRADLE_PROJECT_version=$BUILD_VERSION
  # We are using a build image with techno-gradle 4.4.1 that does not have support yet for gitlab.
  # By setting a few specific environment variables we can still use the Technolution gradle scripts set for this build image
  - export JENKINS_HOME=true
  - export GIT_COMMIT=$CI_COMMIT_SHA
  - export GIT_BRANCH=$CI_COMMIT_REF_NAME
 
stages:
  - build
  - create_images
  - quality

build_fritzy:
  image: docker-proxy.intranet.technolution.nl/techno_gradle:4.9
  stage: build
  script: 
    - cd gradle
    - gradle :fritzy:build 
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - build/
      - .gradle
  artifacts:
    reports:
      junit: fritzy/build/test-results/test/TEST-*.xml
      
build_batty:
  image: docker-proxy.intranet.technolution.nl/techno_gradle:4.9
  stage: build
  script: 
    - cd gradle
    - gradle :batty:build
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - .gradle
      - build/
  artifacts:
    reports:
      junit: batty/build/test-results/test/TEST-*.xml
      
build_netty:
  image: docker-proxy.intranet.technolution.nl/techno_gradle:4.9
  stage: build
  script: 
    - cd gradle
    - gradle :netty:build
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - build/
      - .gradle
  artifacts:
    reports:
      junit: netty/build/test-results/test/TEST-*.xml
      
build_sunny:
  image: docker-proxy.intranet.technolution.nl/techno_gradle:4.9
  stage: build
  script: 
    - cd gradle
    - gradle :sunny:build
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - build/
      - .gradle
  artifacts:
    reports:
      junit: sunny/build/test-results/test/TEST-*.xml
      
build_exxy:
  image: docker-proxy.intranet.technolution.nl/techno_gradle:4.9
  stage: build
  script: 
    - cd gradle
    - gradle :exxy:build
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - build/
      - .gradle
  artifacts:
    reports:
      junit: exxy/build/test-results/test/TEST-*.xml

create_openapi_docs:
  image: docker-proxy.intranet.technolution.nl/techno_gradle:4.9
  stage: create_images
  script: 
    - cd gradle
    - gradle copyApiDocs
  artifacts:
    paths:
      - docker/build/api/
  only:
    - /^release\/.*$/

create_images:
  # Use an image which has docker, for now use EDSN one.
  image: docker-proxy.intranet.technolution.nl/edsn/edsn_docker_aws:latest
  stage: create_images
  script:
    - cd gradle
    - gradle copyArtifactsToDocker
    - docker login -u fritzy2 -p 1upTNLP04
    - cd ../docker/build/fritzy
    - docker build -t fritzy2/fritzy:fritzy .
    - docker push fritzy2/fritzy:fritzy
    - cd ../batty
    - docker build -t fritzy2/fritzy:batty .
    - docker push fritzy2/fritzy:batty
    - cd ../netty
    - docker build -t fritzy2/fritzy:netty .
    - docker push fritzy2/fritzy:netty
    - cd ../sunny
    - docker build -t fritzy2/fritzy:sunny .
    - docker push fritzy2/fritzy:sunny
    - cd ../exxy
    - docker build -t fritzy2/fritzy:exxy .
    - docker push fritzy2/fritzy:exxy
  only:
    - /^release\/.*$/

sonar_quality_check:
  image: docker-proxy.intranet.technolution.nl/techno_gradle:4.9
  stage: quality
  # When the quality job fails, the entire build should not be marked as failed.
  allow_failure: true
  script:
    - cd gradle
    - gradle --build-cache sonar
  dependencies:
    - build_fritzy
    - build_batty
    - build_netty
    - build_sunny
    - build_exxy
  only:
    - master